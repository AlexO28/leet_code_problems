# You are given a network of n nodes represented as an n x n adjacency matrix graph, where the ith node is directly connected to the jth node if graph[i][j] == 1.
# Some nodes initial are initially infected by malware. Whenever two nodes are directly connected, and at least one of those two nodes is infected by malware, both nodes will be infected by malware. This spread of malware will continue until no more nodes can be infected in this manner.
# Suppose M(initial) is the final number of nodes infected with malware in the entire network after the spread of malware stops.
# We will remove exactly one node from initial, completely removing it and any connections from this node to any other node.
# Return the node that, if removed, would minimize M(initial). If multiple nodes could be removed to minimize M(initial), return such a node with the smallest index.
from typing import List
from collections import Counter


class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        self.parent = list(range(len(graph)))
        self.component_size = [1] * (len(graph))
        is_clean = [True] * (len(graph))
        for node in initial:
            is_clean[node] = False
        for i in range(len(graph)):
            if not is_clean[i]:
                continue
            for j in range(i + 1, len(graph)):
                if is_clean[j] and graph[i][j] == 1:
                    self.union(i, j)
        affected_component_count = Counter()
        node_to_components = {}
        for node in initial:
            affected_components = {self.find(j) for j in range(len(graph)) if is_clean[j] and graph[node][j] == 1}
            for root in affected_components:
                affected_component_count[root] += 1
            node_to_components[node] = affected_components
        max_reduction = -1
        result_node = 0
        for node, affected_components in node_to_components.items():
            reduction = sum(self.component_size[root] for root in affected_components if affected_component_count[root] == 1)
            if max_reduction < reduction or (max_reduction == reduction and node < result_node):
                max_reduction = reduction
                result_node = node
        return result_node

    def find(self, x):
        if self.parent[x] != x:
            self.parent[x] = self.find(self.parent[x])
        return self.parent[x]

    def union(self, a, b):
        root_a = self.find(a)
        root_b = self.find(b)
        if root_a != root_b:
            self.component_size[root_b] += self.component_size[root_a]
            self.parent[root_a] = root_b
